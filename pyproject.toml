[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "edge-foundry"
version = "1.0.0"
description = "Deploy, monitor, and manage local AI models with one CLI"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "EdgeFoundry Team", email = "team@edgefoundry.dev"}
]
maintainers = [
    {name = "EdgeFoundry Team", email = "team@edgefoundry.dev"}
]
keywords = [
    "ai",
    "llm",
    "local",
    "deployment",
    "monitoring",
    "cli",
    "fastapi",
    "llama",
    "gguf"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    "llama-cpp-python>=0.3.16",
    "huggingface_hub>=0.35.3",
    "hf_xet>=1.1.0",
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "pyyaml>=6.0.1",
    "typer>=0.9.0",
    "psutil>=5.9.6",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/edge-foundry"
Documentation = "https://github.com/yourusername/edge-foundry#readme"
Repository = "https://github.com/yourusername/edge-foundry.git"
Issues = "https://github.com/yourusername/edge-foundry/issues"
Changelog = "https://github.com/yourusername/edge-foundry/blob/main/CHANGELOG.md"

[project.scripts]
edgefoundry = "edgefoundry.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["edgefoundry*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["edgefoundry"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=edgefoundry",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/edgefoundry"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
